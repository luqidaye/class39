package com.itcast.lucene;


import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;



import org.apache.commons.io.FileUtils;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field.Store;
import org.apache.lucene.document.LongField;
import org.apache.lucene.document.StoredField;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.Term;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.MatchAllDocsQuery;
import org.apache.lucene.search.NumericRangeQuery;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TermQuery;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.search.BooleanClause.Occur;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;
import org.junit.Test;
import org.wltea.analyzer.lucene.IKAnalyzer;

public class indexManager {
   
	
	
	
	//删除
	
	@Test
	public void testDeleteIndex() throws Exception {
	//	1、指定索引库的目录
		FSDirectory directory = FSDirectory.open(new File("D:\\\\indexRespo\\\\11111"));
		IndexWriterConfig config = new IndexWriterConfig(Version.LATEST, new IKAnalyzer());
		IndexWriter indexWriter =new IndexWriter(directory, config);
	indexWriter.deleteAll(); // 慎用！！！！！
		//indexWriter.deleteDocuments(new Term("name","apache"));
		indexWriter.close();
		
	}
	
	//修改
	
	@Test
	public void testUpdateIndex() throws Exception {
	//	1、指定索引库的目录
		FSDirectory directory = FSDirectory.open(new File("D:\\\\indexRespo\\\\11111"));
		IndexWriterConfig config = new IndexWriterConfig(Version.LATEST, new IKAnalyzer());
		IndexWriter indexWriter =new IndexWriter(directory, config);

		Document doc = new Document();
		TextField nameField  = new TextField("name", "自己再IndexWriterConfig一次亲自添加的一个文档spring",Store.YES);
		nameField.setBoost(10);
		doc.add(nameField);
		doc.add(new StoredField("path", "d://sdsds"));
		doc.add(new LongField("size", 100l,Store.YES));
		doc.add(new StringField("content", "自己添加的一个文档自己添加的一个文档自己添加的一个文档",Store.NO));
		indexWriter.updateDocument(new Term("name","apache"), doc);
		
		indexWriter.close();
		
	}
	
	
	@Test
	public void testAddIndex() throws Exception {
    	//1、执行索引库的目录
    	FSDirectory directory  = FSDirectory.open(new File("D:\\indexRespo\\11111"));
    	//2、指定分词器  --标准分词器
    	Analyzer analyzer =new IKAnalyzer();
		
        //3、创建一个配置对象
    	IndexWriterConfig config = new IndexWriterConfig(Version.LATEST, analyzer);
    	//4、创建一个 写入索引对象
    	IndexWriter indexWriter=new IndexWriter(directory,config);
    	
    	
        //5、写入对象了
    	
    	File files = new File("E:\\jiuyebandeshiping\\luceneAndsolor\\lucene第一天\\Lucene&solr-day01\\资料\\上课用的查询资料searchsource");
    	File[] listFiles = files.listFiles();
    	for (File file : listFiles) {
    		Document doc = new Document();
    		//文件名称
    		TextField  fileNameField = new TextField("name", file.getName(), Store.YES);
    		doc.add(fileNameField);
			//文件路径
    		StoredField filePathField = new StoredField("path", file.getPath());
		         doc.add(filePathField);
		     //	文件大小  单位 b    
    	long sizeOf = FileUtils.sizeOf(file);
    	LongField fileSizeField = new LongField("size",sizeOf , Store.YES);
    	doc.add(fileSizeField);
		     //	文件内容
		         String fileContent = FileUtils.readFileToString(file);
		     	TextField  fileContentField = new TextField("content", fileContent, Store.YES);
				doc.add(fileContentField);
				indexWriter.addDocument(doc);
		         
    	}

//		6、关闭IndexWriter对象
		indexWriter.close();
		
		
    	
	}
	
	
	//查询
	@Test
	public void testSearchIndex() throws Exception {
		//1、指定索引库的目录
		FSDirectory directory = FSDirectory.open(new File("D:\\indexRespo\\11111"));
//		2、创建一个读取索引对象
		DirectoryReader indexReader = DirectoryReader.open(directory);
		
//		3、创建一个搜索索引的对象
		IndexSearcher indexSearcher = new IndexSearcher(indexReader);
//		4、执行查询
		//TermQuery query = new TermQuery(new Term("content", "spring is a project"));
	//	 NumericRangeQuery<Long> query = NumericRangeQuery.newLongRange("size", 0l, 100l, true, true);
		//组合查询
	/*	BooleanQuery query = new BooleanQuery();
		TermQuery query1 = new TermQuery(new Term("name","spring"));
		TermQuery query2 = new TermQuery(new Term("content","spring"));
		query.add(query1,Occur.SHOULD);
		query.add(query2,Occur.SHOULD);*/
		//查询所有
		//Query query=new MatchAllDocsQuery();
		//分词查询
		//QueryParser queryParser = new QueryParser("name", new IKAnalyzer());
		//Query query = queryParser.parse("spring is a project");
		TermQuery query = new TermQuery(new Term("name","spring"));
		TextField nameField = new TextField("name", "自己再IndexWriterConfig一次亲自添加的一个文档spring",Store.YES);
		nameField.setBoost(100);
		TopDocs topDocs = indexSearcher.search(query, 100);
		System.out.println("总条数"+topDocs.totalHits);
		ScoreDoc[] scoreDocs = topDocs.scoreDocs;
		for (ScoreDoc scoreDoc : scoreDocs) {
			int docId = scoreDoc.doc;
			Document doc = indexSearcher.doc(docId);
			System.out.println(doc.get("name"));
			//System.out.println(doc.get("size"));
			//System.out.println(doc.get("path"));
//			System.out.println(doc.get("content"));
			System.out.println("----------------------------------------------");
		}
	//	5、关闭资源
		indexReader.close();
	}
	
	
	//中文分词器
	@Test
	public void testAnalyzer() throws Exception {
		Analyzer analyzer = new IKAnalyzer();
		String str = "传智播客：MyBatis 本是apache的一个开源项目iBatis,法轮功 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis--by 白面郎君 毛不易";		
	  	TokenStream tokenStream = analyzer.tokenStream("test", str);
		tokenStream.reset();  //重置指针
//		添加一个引用 字符串
		CharTermAttribute addAttribute = tokenStream.addAttribute(CharTermAttribute.class);
		while(tokenStream.incrementToken()) {
			System.out.println(addAttribute);
		}
	}
	
	
}
